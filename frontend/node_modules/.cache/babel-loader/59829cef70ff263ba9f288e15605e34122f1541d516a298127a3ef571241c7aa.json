{"ast":null,"code":"// API utility functions for communicating with backend services\n\nconst CLIENT_SERVICE_URL = 'http://localhost:8081';\nconst APPOINTMENT_SERVICE_URL = 'http://localhost:8082';\n\n// Generic API call function\nasync function apiCall(url, options = {}) {\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`HTTP ${response.status}: ${errorText}`);\n    }\n\n    // Handle empty responses\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      return await response.json();\n    }\n    return await response.text();\n  } catch (error) {\n    console.error('API call failed:', error);\n    throw error;\n  }\n}\n\n// Client API functions\nexport async function fetchClients() {\n  return apiCall(`${CLIENT_SERVICE_URL}/clients`);\n}\nexport async function fetchClientById(id) {\n  return apiCall(`${CLIENT_SERVICE_URL}/clients/${id}`);\n}\nexport async function searchClients(name) {\n  return apiCall(`${CLIENT_SERVICE_URL}/clients/search?name=${encodeURIComponent(name)}`);\n}\nexport async function createClient(clientData) {\n  return apiCall(`${CLIENT_SERVICE_URL}/clients`, {\n    method: 'POST',\n    body: JSON.stringify(clientData)\n  });\n}\nexport async function updateClient(id, clientData) {\n  return apiCall(`${CLIENT_SERVICE_URL}/clients/${id}`, {\n    method: 'PUT',\n    body: JSON.stringify(clientData)\n  });\n}\nexport async function deleteClient(id) {\n  return apiCall(`${CLIENT_SERVICE_URL}/clients/${id}`, {\n    method: 'DELETE'\n  });\n}\nexport async function syncClients() {\n  return apiCall(`${CLIENT_SERVICE_URL}/clients/sync`, {\n    method: 'POST'\n  });\n}\n\n// Appointment API functions\nexport async function fetchAppointments() {\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments`);\n}\nexport async function fetchUpcomingAppointments() {\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/upcoming`);\n}\nexport async function fetchTodaysAppointments() {\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/today`);\n}\nexport async function fetchAppointmentById(id) {\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/${id}`);\n}\nexport async function fetchAppointmentsByClientId(clientId) {\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/client/${clientId}`);\n}\nexport async function fetchAppointmentsByStatus(status) {\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/status/${status}`);\n}\nexport async function fetchAppointmentsBetween(startTime, endTime) {\n  const params = new URLSearchParams({\n    startTime: startTime,\n    endTime: endTime\n  });\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/range?${params}`);\n}\nexport async function createAppointment(appointmentData) {\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments`, {\n    method: 'POST',\n    body: JSON.stringify(appointmentData)\n  });\n}\nexport async function updateAppointment(id, appointmentData) {\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/${id}`, {\n    method: 'PUT',\n    body: JSON.stringify(appointmentData)\n  });\n}\nexport async function cancelAppointment(id) {\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/${id}/cancel`, {\n    method: 'PATCH'\n  });\n}\nexport async function deleteAppointment(id) {\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/${id}`, {\n    method: 'DELETE'\n  });\n}\nexport async function syncAppointments() {\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/sync`, {\n    method: 'POST'\n  });\n}\nexport async function getAppointmentCountByStatus(status) {\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/stats/count/${status}`);\n}\n\n// Utility functions\nexport function formatDateTime(dateTimeString) {\n  if (!dateTimeString) return '';\n  try {\n    const date = new Date(dateTimeString);\n    return date.toLocaleString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true\n    });\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return dateTimeString;\n  }\n}\nexport function formatDate(dateString) {\n  if (!dateString) return '';\n  try {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return dateString;\n  }\n}\nexport function formatTime(timeString) {\n  if (!timeString) return '';\n  try {\n    const date = new Date(timeString);\n    return date.toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true\n    });\n  } catch (error) {\n    console.error('Error formatting time:', error);\n    return timeString;\n  }\n}","map":{"version":3,"names":["CLIENT_SERVICE_URL","APPOINTMENT_SERVICE_URL","apiCall","url","options","response","fetch","headers","ok","errorText","text","Error","status","contentType","get","includes","json","error","console","fetchClients","fetchClientById","id","searchClients","name","encodeURIComponent","createClient","clientData","method","body","JSON","stringify","updateClient","deleteClient","syncClients","fetchAppointments","fetchUpcomingAppointments","fetchTodaysAppointments","fetchAppointmentById","fetchAppointmentsByClientId","clientId","fetchAppointmentsByStatus","fetchAppointmentsBetween","startTime","endTime","params","URLSearchParams","createAppointment","appointmentData","updateAppointment","cancelAppointment","deleteAppointment","syncAppointments","getAppointmentCountByStatus","formatDateTime","dateTimeString","date","Date","toLocaleString","year","month","day","hour","minute","hour12","formatDate","dateString","toLocaleDateString","formatTime","timeString","toLocaleTimeString"],"sources":["C:/ClinicManagement/wellness-clinic-management-system/frontend/src/utils/api.js"],"sourcesContent":["// API utility functions for communicating with backend services\r\n\r\nconst CLIENT_SERVICE_URL = 'http://localhost:8081';\r\nconst APPOINTMENT_SERVICE_URL = 'http://localhost:8082';\r\n\r\n// Generic API call function\r\nasync function apiCall(url, options = {}) {\r\n  try {\r\n    const response = await fetch(url, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`HTTP ${response.status}: ${errorText}`);\r\n    }\r\n\r\n    // Handle empty responses\r\n    const contentType = response.headers.get('content-type');\r\n    if (contentType && contentType.includes('application/json')) {\r\n      return await response.json();\r\n    }\r\n    \r\n    return await response.text();\r\n  } catch (error) {\r\n    console.error('API call failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Client API functions\r\nexport async function fetchClients() {\r\n  return apiCall(`${CLIENT_SERVICE_URL}/clients`);\r\n}\r\n\r\nexport async function fetchClientById(id) {\r\n  return apiCall(`${CLIENT_SERVICE_URL}/clients/${id}`);\r\n}\r\n\r\nexport async function searchClients(name) {\r\n  return apiCall(`${CLIENT_SERVICE_URL}/clients/search?name=${encodeURIComponent(name)}`);\r\n}\r\n\r\nexport async function createClient(clientData) {\r\n  return apiCall(`${CLIENT_SERVICE_URL}/clients`, {\r\n    method: 'POST',\r\n    body: JSON.stringify(clientData),\r\n  });\r\n}\r\n\r\nexport async function updateClient(id, clientData) {\r\n  return apiCall(`${CLIENT_SERVICE_URL}/clients/${id}`, {\r\n    method: 'PUT',\r\n    body: JSON.stringify(clientData),\r\n  });\r\n}\r\n\r\nexport async function deleteClient(id) {\r\n  return apiCall(`${CLIENT_SERVICE_URL}/clients/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n}\r\n\r\nexport async function syncClients() {\r\n  return apiCall(`${CLIENT_SERVICE_URL}/clients/sync`, {\r\n    method: 'POST',\r\n  });\r\n}\r\n\r\n// Appointment API functions\r\nexport async function fetchAppointments() {\r\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments`);\r\n}\r\n\r\nexport async function fetchUpcomingAppointments() {\r\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/upcoming`);\r\n}\r\n\r\nexport async function fetchTodaysAppointments() {\r\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/today`);\r\n}\r\n\r\nexport async function fetchAppointmentById(id) {\r\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/${id}`);\r\n}\r\n\r\nexport async function fetchAppointmentsByClientId(clientId) {\r\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/client/${clientId}`);\r\n}\r\n\r\nexport async function fetchAppointmentsByStatus(status) {\r\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/status/${status}`);\r\n}\r\n\r\nexport async function fetchAppointmentsBetween(startTime, endTime) {\r\n  const params = new URLSearchParams({\r\n    startTime: startTime,\r\n    endTime: endTime,\r\n  });\r\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/range?${params}`);\r\n}\r\n\r\nexport async function createAppointment(appointmentData) {\r\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments`, {\r\n    method: 'POST',\r\n    body: JSON.stringify(appointmentData),\r\n  });\r\n}\r\n\r\nexport async function updateAppointment(id, appointmentData) {\r\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/${id}`, {\r\n    method: 'PUT',\r\n    body: JSON.stringify(appointmentData),\r\n  });\r\n}\r\n\r\nexport async function cancelAppointment(id) {\r\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/${id}/cancel`, {\r\n    method: 'PATCH',\r\n  });\r\n}\r\n\r\nexport async function deleteAppointment(id) {\r\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n}\r\n\r\nexport async function syncAppointments() {\r\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/sync`, {\r\n    method: 'POST',\r\n  });\r\n}\r\n\r\nexport async function getAppointmentCountByStatus(status) {\r\n  return apiCall(`${APPOINTMENT_SERVICE_URL}/appointments/stats/count/${status}`);\r\n}\r\n\r\n// Utility functions\r\nexport function formatDateTime(dateTimeString) {\r\n  if (!dateTimeString) return '';\r\n  \r\n  try {\r\n    const date = new Date(dateTimeString);\r\n    return date.toLocaleString('en-US', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: true,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error formatting date:', error);\r\n    return dateTimeString;\r\n  }\r\n}\r\n\r\nexport function formatDate(dateString) {\r\n  if (!dateString) return '';\r\n  \r\n  try {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n    });\r\n  } catch (error) {\r\n    console.error('Error formatting date:', error);\r\n    return dateString;\r\n  }\r\n}\r\n\r\nexport function formatTime(timeString) {\r\n  if (!timeString) return '';\r\n  \r\n  try {\r\n    const date = new Date(timeString);\r\n    return date.toLocaleTimeString('en-US', {\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: true,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error formatting time:', error);\r\n    return timeString;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}